// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `HumanPose.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __HumanPose_h__
#define __HumanPose_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompHumanPose
{

class HumanPose;
class HumanPosePrx;

}

namespace RoboCompHumanPose
{

struct Pose3D
{
    float x;
    float z;
    float ry;
    bool posGood;
    bool rotGood;
    int confidence = 0;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const float&, const float&, const float&, const bool&, const bool&, const int&> ice_tuple() const
    {
        return std::tie(x, z, ry, posGood, rotGood, confidence);
    }
};

struct PersonType
{
    int id;
    Pose3D pos;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const Pose3D&> ice_tuple() const
    {
        return std::tie(id, pos);
    }
};

using personList = ::std::vector<PersonType>;

struct humansDetected
{
    int idCamera;
    personList humanList;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const personList&> ice_tuple() const
    {
        return std::tie(idCamera, humanList);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompHumanPose
{

class HumanPose : public virtual ::Ice::Object
{
public:

    using ProxyType = HumanPosePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void obtainHumanPose(humansDetected humansFromCam, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_obtainHumanPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompHumanPose
{

class HumanPosePrx : public virtual ::Ice::Proxy<HumanPosePrx, ::Ice::ObjectPrx>
{
public:

    void obtainHumanPose(const humansDetected& humansFromCam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &HumanPosePrx::_iceI_obtainHumanPose, humansFromCam, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto obtainHumanPoseAsync(const humansDetected& humansFromCam, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &HumanPosePrx::_iceI_obtainHumanPose, humansFromCam, context);
    }

    ::std::function<void()>
    obtainHumanPoseAsync(const humansDetected& humansFromCam,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &HumanPosePrx::_iceI_obtainHumanPose, humansFromCam, context);
    }

    /// \cond INTERNAL
    void _iceI_obtainHumanPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const humansDetected&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    HumanPosePrx() = default;
    friend ::std::shared_ptr<HumanPosePrx> IceInternal::createProxy<HumanPosePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompHumanPose::Pose3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompHumanPose::Pose3D, S>
{
    static void read(S* istr, ::RoboCompHumanPose::Pose3D& v)
    {
        istr->readAll(v.x, v.z, v.ry, v.posGood, v.rotGood, v.confidence);
    }
};

template<>
struct StreamableTraits<::RoboCompHumanPose::PersonType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 22;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompHumanPose::PersonType, S>
{
    static void read(S* istr, ::RoboCompHumanPose::PersonType& v)
    {
        istr->readAll(v.id, v.pos);
    }
};

template<>
struct StreamableTraits<::RoboCompHumanPose::humansDetected>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompHumanPose::humansDetected, S>
{
    static void read(S* istr, ::RoboCompHumanPose::humansDetected& v)
    {
        istr->readAll(v.idCamera, v.humanList);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompHumanPose
{

using HumanPosePtr = ::std::shared_ptr<HumanPose>;
using HumanPosePrxPtr = ::std::shared_ptr<HumanPosePrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompHumanPose
{

class HumanPose;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompHumanPose::HumanPose>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompHumanPose::HumanPose*);
/// \endcond

}

}

namespace RoboCompHumanPose
{

class HumanPose;
/// \cond INTERNAL
::Ice::Object* upCast(HumanPose*);
/// \endcond
typedef ::IceInternal::Handle< HumanPose> HumanPosePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompHumanPose::HumanPose> HumanPosePrx;
typedef HumanPosePrx HumanPosePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(HumanPosePtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompHumanPose
{

struct Pose3D
{
    /** Default constructor that assigns default values to members as specified in the Slice definition. */
    Pose3D() :
        confidence(0)
    {
    }
    
    Pose3D(::Ice::Float x, ::Ice::Float z, ::Ice::Float ry, bool posGood, bool rotGood, ::Ice::Int confidence) :
        x(x),
        z(z),
        ry(ry),
        posGood(posGood),
        rotGood(rotGood),
        confidence(confidence)
    {
    }
    

    ::Ice::Float x;
    ::Ice::Float z;
    ::Ice::Float ry;
    bool posGood;
    bool rotGood;
    ::Ice::Int confidence;
};

struct PersonType
{
    ::Ice::Int id;
    Pose3D pos;
};

typedef ::std::vector<RoboCompHumanPose::PersonType> personList;

struct humansDetected
{
    ::Ice::Int idCamera;
    personList humanList;
};

}

namespace RoboCompHumanPose
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 * Create a wrapper instance by calling ::RoboCompHumanPose::newCallback_HumanPose_obtainHumanPose.
 */
class Callback_HumanPose_obtainHumanPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanPose_obtainHumanPose_Base> Callback_HumanPose_obtainHumanPosePtr;

}

namespace IceProxy
{

namespace RoboCompHumanPose
{

class HumanPose : public virtual ::Ice::Proxy<HumanPose, ::IceProxy::Ice::Object>
{
public:

    void obtainHumanPose(const ::RoboCompHumanPose::humansDetected& humansFromCam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_obtainHumanPose(_iceI_begin_obtainHumanPose(humansFromCam, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_obtainHumanPose(const ::RoboCompHumanPose::humansDetected& humansFromCam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_obtainHumanPose(humansFromCam, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_obtainHumanPose(const ::RoboCompHumanPose::humansDetected& humansFromCam, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_obtainHumanPose(humansFromCam, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_obtainHumanPose(const ::RoboCompHumanPose::humansDetected& humansFromCam, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_obtainHumanPose(humansFromCam, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_obtainHumanPose(const ::RoboCompHumanPose::humansDetected& humansFromCam, const ::RoboCompHumanPose::Callback_HumanPose_obtainHumanPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_obtainHumanPose(humansFromCam, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_obtainHumanPose(const ::RoboCompHumanPose::humansDetected& humansFromCam, const ::Ice::Context& context, const ::RoboCompHumanPose::Callback_HumanPose_obtainHumanPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_obtainHumanPose(humansFromCam, context, cb, cookie);
    }

    void end_obtainHumanPose(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_obtainHumanPose(const ::RoboCompHumanPose::humansDetected&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompHumanPose
{

class HumanPose : public virtual ::Ice::Object
{
public:

    typedef HumanPosePrx ProxyType;
    typedef HumanPosePtr PointerType;

    virtual ~HumanPose();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void obtainHumanPose(const humansDetected& humansFromCam, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_obtainHumanPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const HumanPose& lhs, const HumanPose& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const HumanPose& lhs, const HumanPose& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompHumanPose::Pose3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanPose::Pose3D, S>
{
    static void write(S* ostr, const ::RoboCompHumanPose::Pose3D& v)
    {
        ostr->write(v.x);
        ostr->write(v.z);
        ostr->write(v.ry);
        ostr->write(v.posGood);
        ostr->write(v.rotGood);
        ostr->write(v.confidence);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanPose::Pose3D, S>
{
    static void read(S* istr, ::RoboCompHumanPose::Pose3D& v)
    {
        istr->read(v.x);
        istr->read(v.z);
        istr->read(v.ry);
        istr->read(v.posGood);
        istr->read(v.rotGood);
        istr->read(v.confidence);
    }
};

template<>
struct StreamableTraits< ::RoboCompHumanPose::PersonType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 22;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanPose::PersonType, S>
{
    static void write(S* ostr, const ::RoboCompHumanPose::PersonType& v)
    {
        ostr->write(v.id);
        ostr->write(v.pos);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanPose::PersonType, S>
{
    static void read(S* istr, ::RoboCompHumanPose::PersonType& v)
    {
        istr->read(v.id);
        istr->read(v.pos);
    }
};

template<>
struct StreamableTraits< ::RoboCompHumanPose::humansDetected>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanPose::humansDetected, S>
{
    static void write(S* ostr, const ::RoboCompHumanPose::humansDetected& v)
    {
        ostr->write(v.idCamera);
        ostr->write(v.humanList);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanPose::humansDetected, S>
{
    static void read(S* istr, ::RoboCompHumanPose::humansDetected& v)
    {
        istr->read(v.idCamera);
        istr->read(v.humanList);
    }
};

}
/// \endcond

namespace RoboCompHumanPose
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 * Create a wrapper instance by calling ::RoboCompHumanPose::newCallback_HumanPose_obtainHumanPose.
 */
template<class T>
class CallbackNC_HumanPose_obtainHumanPose : public Callback_HumanPose_obtainHumanPose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_HumanPose_obtainHumanPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanPose_obtainHumanPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanPose_obtainHumanPose<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanPose_obtainHumanPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanPose_obtainHumanPose<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 * Create a wrapper instance by calling ::RoboCompHumanPose::newCallback_HumanPose_obtainHumanPose.
 */
template<class T, typename CT>
class Callback_HumanPose_obtainHumanPose : public Callback_HumanPose_obtainHumanPose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_HumanPose_obtainHumanPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T, typename CT> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanPose_obtainHumanPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T, typename CT> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanPose_obtainHumanPose<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T, typename CT> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanPose_obtainHumanPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompHumanPose::HumanPose::begin_obtainHumanPose.
 */
template<class T, typename CT> Callback_HumanPose_obtainHumanPosePtr
newCallback_HumanPose_obtainHumanPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanPose_obtainHumanPose<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
